@model IEnumerable<Blog.Models.UserCreatedPost>

@{
    ViewBag.Title = "Index";
}

<div id="body" class="container">
    <div class="row">
        <div class="col-md-12">

            <h1>Latest post</h1>
            <p>The .table-striped class adds zebra-stripes to a table:</p>
            <p>
                @Html.ActionLink("Create New", "Create")
            </p>

            @foreach (var item in Model)
            {
                @Html.ActionLink("Edit", "Edit", new { id = item.PostId })
                <article>
                    <h2>@Html.ActionLink(@item.Tittle, "Details", new { id = item.PostId })</h2>
                    <div class="row">
                        <div class="group1 col-md-6">
                            <span class="glyphicon glyphicon-user"></span> @item.UserName  &emsp;
                            <span class="glyphicon glyphicon-time"></span> @item.CreatedDate.ToString("dd/MM/yyyy")
                        </div>
                    </div>
                    <br />
                    <p class="test">
                        @if (item.Content.Length > 100)
                        {
                            @item.Content.Substring(0, 100)
                        }
                        else
                        {
                            @item.Content
                        }
                </p>

                <br />
                <p class="text-right">
                    <a class="text-right">@Html.ActionLink("Continue reading...", "Details", new { id = item.PostId })</a>
                </p>
                <hr>
          
            </article>

            }

        </div>

        <div class="pagination">
            @pageLinks()
        </div>

        @helper buildLinks(int start, int end, string innerContent)
{
    for (int i = start; i <= end; i++)
    {
        <a class="@(i == ViewBag.Page ? "active" : "")" href="@Url.Action("Index", new { page = i })">@(innerContent ?? i.ToString())</a>
    }
}


        @helper pageLinks()
{
    const int maxPages = 11;

    if (ViewBag.MaxPage <= maxPages)
    {
        @buildLinks(1, (int)ViewBag.MaxPage, null)
        return;
    }

    int pagesAfter = ViewBag.MaxPage - ViewBag.Page; // Number of pages after current
    int pagesBefore = ViewBag.Page - 1; // Number of pages before current

    if (pagesAfter <= 4)
    {
        @buildLinks(1, 1, null) // Show 1st page

        int pageSubset = ViewBag.MaxPage - maxPages - 1 > 1 ? ViewBag.Maxpage - maxPages - 1 : 2;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)
                                                @buildLinks(ViewBag.MaxPage - maxPages + 3, ViewBag.MaxPage, null) // Show last pages

        return; // Exit
    }

    if (pagesBefore <= 4)
    {
        @buildLinks(1, maxPages - 2, null) // Show 1st pages


        int pageSubset = maxPages + 2 < ViewBag.MaxPage ? maxPages + 2 : ViewBag.MaxPage - 1;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)
                                                @buildLinks(ViewBag.MaxPage, ViewBag.MaxPage, null) // Show last page
        return; // Exit
    }

    if (pagesAfter > 4)
    {
        @buildLinks(1, 1, null) // Show 1st pages

        int pageSubset1 = ViewBag.Page - 7 > 1 ? ViewBag.Page - 7 : 2;
        int pageSubset2 = ViewBag.Page + 7 < ViewBag.MaxPage ? ViewBag.Page + 7 : ViewBag.MaxPage - 1;

        @buildLinks(pageSubset1, pageSubset1, pageSubset1 == ViewBag.Page - 4 ? null : "...") // Show 1st page subset (...)

                                                                                            @buildLinks(ViewBag.Page - 3, ViewBag.Page + 3, null) // Show middle pages

        // Show 2nd page subset (...)
        // only show ... if page is contigous to the previous one.
        @buildLinks(pageSubset2, pageSubset2, pageSubset2 == ViewBag.Page + 4 ? null : "...")
        @buildLinks(ViewBag.MaxPage, ViewBag.MaxPage, null) // Show last page
        return; // Exit

    }
}









        @*@if (ViewBag.Page > 0)
            {
                <a href="@Url.Action("Index", new { page = ViewBag.Page - 1 })"
                   class="btn btn-default">
                    &laquo; Prev
                </a>
            }
            @if (ViewBag.Page < ViewBag.MaxPage)
            {
                <a href="@Url.Action("Index", new { page = ViewBag.Page + 1 })"
                   class="btn btn-default">
                    Next &raquo;
                </a>
            }*@

    </div>
</div>


@*<table class="table">
        <tr>

            <th>
                @Html.DisplayNameFor(model => model.Tittle)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Content)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatorId)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Tittle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Content)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatorId)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.PostId }) |
                    @Html.ActionLink("Details", "Details", new { id = item.PostId }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.PostId })
                </td>
            </tr>
        }

    </table>*@
